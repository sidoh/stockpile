os.loadAPI("tablePersistence")

settings = nil
local SETTINGS_FILE = "stockpile/stockpile.json"

function load()
  local loaded = tablePersistence.load(SETTINGS_FILE)

  if loaded == nil then
    loaded = { stockedItems = {} }
  end

  settings = loaded
end

function save()
  tablePersistence.save(SETTINGS_FILE, settings)
end

function getStockedItems()
if settings == nil then
  print("settings is nil")
end
  return settings.stockedItems
end

function removeStockedItem(witem)
  settings.stockedItems[itemKey(witem)] = nil
  save()
end

function setItemThreshold(witem, threshold)
  local currentSettings = itemSettings(witem)
  if currentSettings == nil then
    settings.stockedItems[itemKey(witem)] = { 
      witem = witem,
      threshold = threshold 
    }
  else
    currentSettings.threshold = threshold
  end

  save()
end

function getItemThreshold(witem)
  local isettings = itemSettings(witem)

  if isettings ~= nil then
    return isettings.threshold
  else
    return nil
  end
end

function itemIsStocked(witem)
  return itemSettings(witem) ~= nil
end

function itemSettings(witem)
  return getSettings().stockedItems[itemKey(witem)]
end

--unused
function itemFromKey(key)
  local parts = split(key, "/")
  if #parts == 3 then
    return { name = parts[1], damage = parts[2], nbtHash = parts[3] }
  end
  return { name = parts[1], damage = parts[2] }
end

function itemKey(witem)
  local key = witem.name .. "/" .. witem.damage
  if witem.nbtHash ~= nil then
    key = key .. "/" .. witem.nbtHash
  end
  return key
end

function split(str, sep)
   local result = {}
   local regex = ("([^%s]+)"):format(sep)
   for each in str:gmatch(regex) do
      table.insert(result, each)
   end
   return result
end

function getSettings()
  if settings == nil then
    load()
  end
  return settings
end
