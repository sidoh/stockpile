os.loadAPI("userIo")
os.loadAPI("tablePersistence")
os.loadAPI("stockpile/settingsPersistence")

local CACHE_FILE = "stockpile/item_cache.json"

local allItems = {}
local cache = {}
local aeInterface = peripheral.wrap("back")
mod = nil
if aeInterface.getAvailableItems then
  mod = "openperipherals"
elseif aeInterface.listAvailableItems then
  mod = "plethora"
end

function saveCache()
  tablePersistence.save(CACHE_FILE, cache)
end

function loadCache()
  local loaded = tablePersistence.load(CACHE_FILE)

  if loaded == nil then
    loaded = { itemDetail = {} }
  end

  cache = loaded
end

--stores the detailed name in the cache, when not cached already. returns the cache entry.
-- witem is a wrapped item.
function getItemDetail(witem)
  local itemKey = settingsPersistence.itemKey(witem)
  if cache.itemDetail[itemKey] == nil then
    local details = nil
    local itemDetail = { display_name = nil }
    if mod == "plethora" then
      details = aeInterface.findItem(witem.fingerprint).getMetadata()
      itemDetail.display_name = details.displayName
    elseif mod == "openperipherals" then
      details = aeInterface.getItemDetail(witem.fingerprint).all()
      itemDetail.display_name = details.display_name
    end
    cache.itemDetail[itemKey] = itemDetail
  end
  return cache.itemDetail[itemKey]
end

--clean interface to support multiple peripheral mods.
-- item is the mods item representation from the availableItems list.
function wrapItem(item)
  if mod == "plethora" then
    return {name = item.name, damage = item.damage, nbtHash = item.nbtHash, isCraftable = item.isCraftable, count = item.count, fingerprint = { name = item.name, damage = item.damage, nbtHash = item.nbtHash} }
  elseif mod == "openperipherals" then
    return {name = item.id, damage = item.fingerprint.dmg, nbtHash = item.fingerprint.nbt_hash, isCraftable = item.is_craftable, count = item.size, fingerprint = item.fingerprint }
  else
    return nil
  end
end

function refreshItems()
  if mod == "plethora" then
    allItems = aeInterface.listAvailableItems()
  elseif mod == "openperipherals" then
    allItems = aeInterface.getAvailableItems()
  end
  --print("Got " .. #allItems .. " items.")
  loadCache()
  for i, item in ipairs(allItems) do
    local witem = wrapItem(item)
    if witem and witem.isCraftable and item.itemDetails == nil then
      item.itemDetails = pcall(function() getItemDetail(witem) end)
    end
  end
  saveCache()
end

function getAvailableItems()
  return allItems
end

function stringMatches(s1,s2)
  if (s1 ~= s2) and (s1 == nil or s2 == nil) then
    return false
  else
    return string.find(string.lower(s1), string.lower(s2)) ~= nil
  end
end

function isSameItem(i1, i2)
  return i1.name == i2.name and i1.damage == i2.damage
end

--search availableItems by ?
function findCraftableItem(itemToFind)
  for i, item in ipairs(allItems) do
    local witem = wrapItem(allItems[i])
    if witem.isCraftable and isSameItem(witem, itemToFind) then
      return witem
    end
  end

  return nil
end

function findCraftableItemByName(itemName)
  matchingItems = {}
  for i, item in ipairs(allItems) do
    local witem = wrapItem(allItems[i])
    local itemDetail = getItemDetail(witem)
    --print(itemDetail.display_name)
    if witem.isCraftable and itemDetail ~= nil and stringMatches(itemDetail.display_name, itemName) then
      table.insert(matchingItems, witem)
    end
  end
  
  return matchingItems
end

function chooseCraftableItem()
  print("Type the name of an item")
  io.write("> ")
  local item = io.read()
  results = findCraftableItemByName(item)

  if table.getn(results) > 0 then
    local options = {}
    for i, witem in ipairs(results) do
      local itemDetail = getItemDetail(witem)
      local itemName = witem.name
      if itemDetail ~= nil then
        itemName = itemDetail.display_name
      end

      table.insert(options, itemName)
      --io.write(string.format("%d. %s\n", i, itemName))
    end
    userIo.printOptions(options)

    print("Which did you mean? (0 to cancel)")
    local i = userIo.promptForNumberInRange(0, table.getn(results))
    
    if i > 0 then
      return results[i]
    else
      return nil
    end
  else
    return nil
  end
end
